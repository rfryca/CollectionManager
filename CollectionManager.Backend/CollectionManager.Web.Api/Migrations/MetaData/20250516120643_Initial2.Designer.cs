// <auto-generated />
using System;
using CollectionManager.Web.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CollectionManager.Web.Api.Migrations.MetaData
{
    [DbContext(typeof(MetaDataContext))]
    [Migration("20250516120643_Initial2")]
    partial class Initial2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CollectionManager.Web.Api.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("CollectionManager.Web.Api.Data.Entities.Metadata.CategoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CollectionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CollectionTypeId");

                    b.HasIndex("ParentCategoryTypeId");

                    b.ToTable("CategoryTypes", (string)null);
                });

            modelBuilder.Entity("CollectionManager.Web.Api.Data.Entities.Metadata.CollectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("CollectionTypes", (string)null);
                });

            modelBuilder.Entity("CollectionManager.Web.Api.Data.Entities.Metadata.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CollectionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CollectionTypeId");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("CollectionManager.Web.Api.Data.Entities.Metadata.CategoryType", b =>
                {
                    b.HasOne("CollectionManager.Web.Api.Data.Entities.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("CollectionManager.Web.Api.Data.Entities.Metadata.CollectionType", "CollectionType")
                        .WithMany("CategoryTypes")
                        .HasForeignKey("CollectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CollectionManager.Web.Api.Data.Entities.Metadata.CategoryType", "ParentCategoryType")
                        .WithMany("SubcategoryTypes")
                        .HasForeignKey("ParentCategoryTypeId");

                    b.Navigation("CollectionType");

                    b.Navigation("Owner");

                    b.Navigation("ParentCategoryType");
                });

            modelBuilder.Entity("CollectionManager.Web.Api.Data.Entities.Metadata.CollectionType", b =>
                {
                    b.HasOne("CollectionManager.Web.Api.Data.Entities.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CollectionManager.Web.Api.Data.Entities.Metadata.ItemType", b =>
                {
                    b.HasOne("CollectionManager.Web.Api.Data.Entities.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("CollectionManager.Web.Api.Data.Entities.Metadata.CollectionType", "CollectionType")
                        .WithMany("ItemTypes")
                        .HasForeignKey("CollectionTypeId");

                    b.Navigation("CollectionType");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CollectionManager.Web.Api.Data.Entities.Metadata.CategoryType", b =>
                {
                    b.Navigation("SubcategoryTypes");
                });

            modelBuilder.Entity("CollectionManager.Web.Api.Data.Entities.Metadata.CollectionType", b =>
                {
                    b.Navigation("CategoryTypes");

                    b.Navigation("ItemTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
